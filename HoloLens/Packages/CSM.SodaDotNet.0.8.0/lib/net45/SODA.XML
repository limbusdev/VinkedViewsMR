<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SODA</name>
    </assembly>
    <members>
        <member name="T:SODA.Models.HumanAddress">
            <summary>
            A class to model the human-readable address portion of a <see cref="T:SODA.Models.LocationColumn">LocationColumn</see> in a Socrata resource. 
            </summary>
        </member>
        <member name="M:SODA.Models.HumanAddress.#ctor">
            <summary>
            Initialize a new HumanAddress object.
            </summary>
        </member>
        <member name="M:SODA.Models.HumanAddress.#ctor(System.String)">
            <summary>
            Initialize a new HumanAddress object from its JSON string representation.
            </summary>
            <param name="humanAddressJson">The serialized JSON string of a HumanAddress object.</param>
        </member>
        <member name="M:SODA.Models.HumanAddress.Equals(SODA.Models.HumanAddress)">
            <summary>
            Overload Equals for HumanAddresses.
            </summary>
            <param name="other">Another HumanAddress object to compare to this instance.</param>
            <returns>True if all of Address, City, State, and Zip are equal for the two instances. False otherwise.</returns>
        </member>
        <member name="P:SODA.Models.HumanAddress.Address">
            <summary>
            Gets or sets the number and street component of an address.
            </summary>
        </member>
        <member name="P:SODA.Models.HumanAddress.City">
            <summary>
            Gets or sets the city in which this address resides.
            </summary>
        </member>
        <member name="P:SODA.Models.HumanAddress.State">
            <summary>
            Gets or sets the state in which this address resides.
            </summary>
        </member>
        <member name="P:SODA.Models.HumanAddress.Zip">
            <summary>
            Gets or sets the zipcode in which this address resides.
            </summary>
        </member>
        <member name="T:SODA.Models.LocationColumn">
            <summary>
            A class to model the Socrata Location column type.
            </summary>
        </member>
        <member name="M:SODA.Models.LocationColumn.OnSerializingMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            On serializing, convert this LocationColumn's <see cref="P:SODA.Models.LocationColumn.HumanAddress"/> property to its JSON string representation.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:SODA.Models.LocationColumn.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            On deserializing, attempt to convert this LocationColumn's JSON string representation of a <see cref="P:SODA.Models.LocationColumn.HumanAddress"/> into a materialized object.
            </summary>
            <param name="contex"></param>
        </member>
        <member name="P:SODA.Models.LocationColumn.NeedsRecoding">
            <summary>
            Gets or sets a flag indicating if geocoding should be performed on this LocationColumn (in the Socrata Host).
            </summary>
        </member>
        <member name="P:SODA.Models.LocationColumn.Longitude">
            <summary>
            Gets or sets the string representation of the longitude value for this LocationColumn.
            </summary>
        </member>
        <member name="P:SODA.Models.LocationColumn.Latitude">
            <summary>
            Gets or sets the string representation of the latitude value for this LocationColumn.
            </summary>
        </member>
        <member name="P:SODA.Models.LocationColumn.HumanAddress">
            <summary>
            Gets or sets the human-friendly address component of this LocationColumn.
            </summary>
        </member>
        <member name="P:SODA.Models.LocationColumn.HumanAddressJsonString">
            <summary>
            The JSON string representation of this LocationColumn's <see cref="P:SODA.Models.LocationColumn.HumanAddress"/> property.
            </summary>
            <remarks>
            This is marked as internal since it will be derived from the <see cref="P:SODA.Models.LocationColumn.HumanAddress"/> property.
            </remarks>
        </member>
        <member name="T:SODA.Models.PhoneColumn">
            <summary>
            A class to model the Socrata Phone column type.
            </summary>
        </member>
        <member name="M:SODA.Models.PhoneColumn.#ctor">
            <summary>
            Initialize a new PhoneColumn object.
            </summary>
        </member>
        <member name="M:SODA.Models.PhoneColumn.#ctor(System.String)">
            <summary>
            Initialize a new PhoneColumn object from its JSON string representation.
            </summary>
        </member>
        <member name="M:SODA.Models.PhoneColumn.OnSerializingMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            On serializing, convert this PhoneColumn's <see cref="P:SODA.Models.PhoneColumn.PhoneType"/> property to its string representation.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:SODA.Models.PhoneColumn.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            On deserializing, attempt to convert this PhoneColumn's string representation of a <see cref="P:SODA.Models.PhoneColumn.PhoneType"/> into the correct enumeration.
            </summary>
            <param name="contex"></param>
        </member>
        <member name="P:SODA.Models.PhoneColumn.PhoneNumber">
            <summary>
            Gets or sets the string representation of the phone_number value for this PhoneColumn.
            </summary>
            <remarks>
            Setting the phone number with no punctuation (ex: 3609022700) will allow the phone to formatted by the consumer. This is not a requirement.
            </remarks>
        </member>
        <member name="P:SODA.Models.PhoneColumn.PhoneType">
            <summary>
            Gets or sets the string representation of the phone_type value for this PhoneColumn.
            </summary>
        </member>
        <member name="P:SODA.Models.PhoneColumn.PhoneTypeString">
            <summary>
            The phone type string that will used for serialization
            </summary>
            <remarks>
            This is marked as internal since it will be set based on the <see cref="P:SODA.Models.PhoneColumn.PhoneType"/> property.
            </remarks>
        </member>
        <member name="T:SODA.Models.PhoneColumnType">
            <summary>
            Enumeration of the phone types for a phone column.
            </summary>
            <remarks>
            Discovered by setting a phone column on the web site to each of the available items in the list, then pulling the dataset as JSON.
            </remarks>
        </member>
        <member name="F:SODA.Models.PhoneColumnType.Undefined">
            <summary>
            Value representing the type of the number is not set or unknown.
            </summary>
        </member>
        <member name="F:SODA.Models.PhoneColumnType.Cell">
            <summary>
            Value representing cell number.
            </summary>
        </member>
        <member name="F:SODA.Models.PhoneColumnType.Home">
            <summary>
            Value representing home number.
            </summary>
        </member>
        <member name="F:SODA.Models.PhoneColumnType.Work">
            <summary>
            Value representing a work number.
            </summary>
        </member>
        <member name="F:SODA.Models.PhoneColumnType.Fax">
            <summary>
            Value representing a fax number.
            </summary>
        </member>
        <member name="F:SODA.Models.PhoneColumnType.Other">
            <summary>
            Value representing some other type of phone number.
            </summary>
        </member>
        <member name="T:SODA.Models.WebsiteUrlColumn">
            <summary>
            A class to model the Socrata Website URL column type.
            </summary>
        </member>
        <member name="M:SODA.Models.WebsiteUrlColumn.#ctor">
            <summary>
            Initialize a new WebsiteUrlColumn.
            </summary>
        </member>
        <member name="M:SODA.Models.WebsiteUrlColumn.#ctor(System.String,System.String)">
            <summary>
            Initialize a new WebsiteUrlColumn with the specified url and description.
            </summary>
            <param name="url"></param>
            <param name="description"></param>
        </member>
        <member name="M:SODA.Models.WebsiteUrlColumn.#ctor(System.Uri,System.String)">
            <summary>
            Initialize a new WebsiteUrlColumn with the specified uri and description.
            </summary>
            <param name="uri"></param>
            <param name="description"></param>
        </member>
        <member name="P:SODA.Models.WebsiteUrlColumn.Description">
            <summary>
            Gets or sets the link text of this WebsiteUrlColumn.
            </summary>
        </member>
        <member name="P:SODA.Models.WebsiteUrlColumn.Url">
            <summary>
            Gets or sets the link url of this WebsiteUrlColumn.
            </summary>
        </member>
        <member name="T:SODA.SodaRequest">
            <summary>
            Implementation detail representing a request/response to/from a SODA endpoint.
            </summary>
        </member>
        <member name="M:SODA.SodaRequest.#ctor(System.Uri,System.String,System.String,System.String,System.String,SODA.SodaDataFormat,System.String,System.Nullable{System.Int32})">
            <summary>
            Initialize a new SodaRequest.
            </summary>
            <param name="uri">The Uri to send the request to.</param>
            <param name="method">The HTTP method to use for the request.</param>
            <param name="appToken">The Socrata App Token to send with the request.</param>
            <param name="username">The Socrata user account to use for the request.</param>
            <param name="password">The password for the specified Socrata <paramref name="username"/>.</param>
            <param name="dataFormat">One of the data-interchange formats that Socrata supports. The default is JSON.</param>
            <param name="payload">The body of the request.</param>
            <param name="timeout">The number of milliseconds to wait for a response before throwing a Timeout WebException.</param>
        </member>
        <member name="M:SODA.SodaRequest.ParseResponse``1">
            <summary>
            Send this SodaRequest's webRequest and interpret the response.
            </summary>
            <typeparam name="TResult">The target type during response deserialization.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown if response deserialization into the requested type fails.</exception>
        </member>
        <member name="M:SODA.SodaRequest.#ctor">
            <summary>
            Disable unsupported security protocols for all requests.
            See https://support.socrata.com/hc/en-us/articles/235267087 for more information.
            </summary>
        </member>
        <member name="P:SODA.SodaRequest.webRequest">
            <summary>
            The underlying HttpWebRequest handled by this SodaRequest
            </summary>
        </member>
        <member name="P:SODA.SodaRequest.dataFormat">
            <summary>
            The Socrata supported data-interchange formats that this SodaRequest uses
            </summary>
        </member>
        <member name="T:SODA.SoqlOrderDirection">
            <summary>
            Enumeration of possible sort orders for use with a <see cref="T:SODA.SoqlQuery"/>.
            </summary>
        </member>
        <member name="F:SODA.SoqlOrderDirection.ASC">
            <summary>
            Value representing an ascending ordering. This is the default.
            </summary>
        </member>
        <member name="F:SODA.SoqlOrderDirection.DESC">
            <summary>
            Value representing a descending ordering.
            </summary>
        </member>
        <member name="T:SODA.Resource`1">
            <summary>
            A class that represents the data and operations of a resource in Socrata.
            </summary>
            <typeparam name="TRow">The .NET class that represents the type of the underlying row in this resource.</typeparam>
        </member>
        <member name="F:SODA.Resource`1.lazyMetadata">
            <summary>
            Lazy-load container for this Resource's metadata.
            </summary>
        </member>
        <member name="M:SODA.Resource`1.#ctor(System.String,SODA.SodaClient)">
            <summary>
            Initialize a new Resource object.
            </summary>
            <param name="resourceIdentifier">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <param name="client">A <see cref="T:SODA.SodaClient"/> used to access this Resource on a Socrata Host.</param>
            <remarks>
            The only available constructors are internal because Resources should be obtained through a SodaClient.
            This constructor sets up the Resource to lazy-load its ResourceMetadata upon first request.
            </remarks>
        </member>
        <member name="M:SODA.Resource`1.#ctor(SODA.ResourceMetadata)">
            <summary>
            Initialize a new Resource object with the specified ResourceMetadata.
            </summary>
            <param name="metadata">The <see cref="T:SODA.ResourceMetadata"/> object that describes this Resource.</param>
            <remarks>
            The only available constructors are internal because Resources should be obtained through a SodaClient.
            </remarks>
        </member>
        <member name="M:SODA.Resource`1.Query``1(SODA.SoqlQuery)">
            <summary>
            Query this Resource using the specified <see cref="T:SODA.SoqlQuery"/>.
            </summary>
            <typeparam name="T">The .NET class that represents the type of the underlying rows in this resultset of this query.</typeparam>
            <param name="soqlQuery">A <see cref="T:SODA.SoqlQuery"/> to execute against this Resource.</param>
            <returns>A collection of entities of type <typeparamref name="T"/>.</returns>
            <remarks>
            By default, Socrata will only return the first 1000 rows unless otherwise specified in SoQL using the Limit and Offset parameters.
            This method checks the specified SoqlQuery object for either the Limit or Offset parameter, and honors those parameters if present.
            If both Limit and Offset are not part of the SoqlQuery, this method attempts to retrieve all rows in the dataset across all pages.
            In other words, this method hides the fact that Socrata will only return 1000 rows at a time, unless explicity told not to via the SoqlQuery argument.
            </remarks>
        </member>
        <member name="M:SODA.Resource`1.Query(SODA.SoqlQuery)">
            <summary>
            Query this Resource using the specified <see cref="T:SODA.SoqlQuery"/>.
            </summary>
            <param name="soqlQuery">A <see cref="T:SODA.SoqlQuery"/> to execute against this Resource.</param>
            <returns>A collection of entities of type <typeparamref name="TRow"/>.</returns>
            <remarks>
            This is a convenience method for the generic <see cref="M:SODA.Resource`1.Query``1(SODA.SoqlQuery)"/>, and is useful if you want the result of a query 
            to be typed to <typeparamref name="TRow"/> (this Resource's underlying record type).
            </remarks>
        </member>
        <member name="M:SODA.Resource`1.GetRows">
            <summary>
            Get all of the rows contained in this Resource.
            </summary>
            <returns>A collection of type <typeparamref name="TRow"/>.</returns>
            <remarks>
            GetRows will attempt to return *all rows* in the Resource, beyond the 1000 rows per request limit that Socrata imposes.
            See <see cref="M:SODA.Resource`1.Query``1(SODA.SoqlQuery)"/>
            </remarks>
        </member>
        <member name="M:SODA.Resource`1.GetRows(System.Int32)">
            <summary>
            Get a subset of the rows contained in this Resource, with maximum size equal to the specified limit.
            </summary>
            <param name="limit">The maximum number of rows to return in the resulting collection.</param>
            <returns>A collection of type <typeparamref name="TRow"/>, of maximum size equal to the specified <paramref name="limit"/>.</returns>
        </member>
        <member name="M:SODA.Resource`1.GetRows(System.Int32,System.Int32)">
            <summary>
            Get a subset of the rows contained in this Resource, with maximum size equal to the specified limit, starting at the specified offset into the total row count.
            </summary>
            <param name="limit">The maximum number of rows to return in the resulting collection.</param>
            <param name="offset">The index into this Resource's total rows from which to start.</param>
            <returns>A collection of type <typeparamref name="TRow"/>, of maximum size equal to the specified <paramref name="limit"/>.</returns>
        </member>
        <member name="M:SODA.Resource`1.GetRow(System.String)">
            <summary>
            Get a single row of type <typeparamref name="TRow"/> from this Resource's row collection using the specified row id.
            </summary>
            <param name="rowId">The identifier for the row to retrieve.</param>
            <returns>The row with an identifier matching the specified identifier.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="rowId"/> is null or empty.</exception>
        </member>
        <member name="M:SODA.Resource`1.Upsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Update/Insert this Resource with the specified collection of entities.
            </summary>
            <param name="payload">A collection of entities, where each represents a single row to be upserted.</param>
            <returns>A <see cref="T:SODA.SodaResult"/> indicating success or failure.</returns>
        </member>
        <member name="M:SODA.Resource`1.BatchUpsert(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{`0},`0,System.Boolean})">
            <summary>
            Update/Insert this Resource with the specified collection of entities in batches of the specified size.
            </summary>
            <param name="payload">A collection of entities, where each represents a single row to be upserted.</param>
            <param name="batchSize">The maximum number of entities to process in a single batch.</param>
            <param name="breakFunction">A function which, when evaluated true, causes a batch to be sent (possibly before it reaches <paramref name="batchSize"/>).</param>
            <returns>A collection of <see cref="T:SODA.SodaResult"/>, one for each batched Upsert.</returns>
        </member>
        <member name="M:SODA.Resource`1.BatchUpsert(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Update/Insert this Resource with the specified collection of entities in batches of the specified size.
            </summary>
            <param name="payload">A collection of entities, where each represents a single row to be upserted.</param>
            <param name="batchSize">The maximum number of entities to process in a single batch.</param>
            <returns>A collection of <see cref="T:SODA.SodaResult"/>, one for each batch processed.</returns>
        </member>
        <member name="M:SODA.Resource`1.Replace(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replace any existing rows in this Resource with the specified collection of entities.
            </summary>
            <param name="payload">A collection of entities, where each represents a single row.</param>
            <returns>A <see cref="T:SODA.SodaResult"/> indicating success or failure.</returns>
        </member>
        <member name="M:SODA.Resource`1.DeleteRow(System.String)">
            <summary>
            Delete a single row in this Resource identified by the specified rowId.
            </summary>
            <param name="rowId">The identifier of the row to be deleted.</param>
            <returns>A <see cref="T:SODA.SodaResult"/> indicating success or failure.</returns>
        </member>
        <member name="P:SODA.Resource`1.Metadata">
            <summary>
            Gets the <see cref="T:SODA.ResourceMetadata"/> describing this Resource.
            </summary>
        </member>
        <member name="P:SODA.Resource`1.Client">
            <summary>
            Gets the <see cref="T:SODA.SodaClient"/> used for sending requests to this Resource's Host.
            </summary>
        </member>
        <member name="P:SODA.Resource`1.Host">
            <summary>
            Gets the url to the Socrata Open Data Portal that hosts this Resource.
            </summary>
        </member>
        <member name="P:SODA.Resource`1.Columns">
            <summary>
            Gets the collection of <see cref="T:SODA.ResourceColumn"/> describing the schema of this Resource.
            </summary>
        </member>
        <member name="P:SODA.Resource`1.Identifier">
            <summary>
            Gets the Socrata identifier (4x4) for this Resource.
            </summary>
        </member>
        <member name="T:SODA.ResourceColumn">
            <summary>
            A class that represents a single column of a <see cref="T:SODA.Resource`1">Resource</see> in Socrata.
            </summary>
        </member>
        <member name="P:SODA.ResourceColumn.Id">
            <summary>
            Gets the internal Socrata identifier for this ResourceColumn.
            </summary>
        </member>
        <member name="P:SODA.ResourceColumn.Name">
            <summary>
            Gets or sets the "display" field name for this ResourceColumn.
            </summary>
            <remarks>
            This is the label given to the column when viewing the resource in a Socrata Open Data portal.
            </remarks>
        </member>
        <member name="P:SODA.ResourceColumn.DataTypeName">
            <summary>
            Gets the underlying (Socrata) data type for this ResourceColumn.
            </summary>
        </member>
        <member name="P:SODA.ResourceColumn.SodaFieldName">
            <summary>
            Gets or sets the SODA-compatible field name this for this ResourceColumn.
            </summary>
            <remarks>
            This is the name of the field when making SODA calls against the resource.
            </remarks>
        </member>
        <member name="P:SODA.ResourceColumn.Position">
            <summary>
            Gets the ordinal position of this ResourceColumn among the other columns in the resource.
            </summary>
        </member>
        <member name="P:SODA.ResourceColumn.RenderType">
            <summary>
            Gets the (Socrata) data type used to render data in this ResourceColumn.
            </summary>
        </member>
        <member name="P:SODA.ResourceColumn.TableColumnId">
            <summary>
            Gets the internal Socrata identifier for this ResourceColumn from the original resource table.
            </summary>
        </member>
        <member name="T:SODA.ResourceMetadata">
            <summary>
            A class that represents metadata about a <see cref="T:SODA.Resource`1">Resource</see> in Socrata.
            </summary>
        </member>
        <member name="M:SODA.ResourceMetadata.Update">
            <summary>
            Updates this ResourceMetadata on the Socrata Host.
            </summary>
            <returns>A SodaResult, indicating success or failure.</returns>
        </member>
        <member name="M:SODA.ResourceMetadata.#ctor">
            <summary>
            Initialize a new ResourceMetadata object.
            </summary>
            <remarks>
            The constructor is internal because ResourceMetadata should be obtained through a SodaClient or Resource object.
            </remarks>
        </member>
        <member name="M:SODA.ResourceMetadata.#ctor(SODA.SodaClient)">
            <summary>
            Initialize a new ResourceMetadata object with the specified <see cref="T:SODA.SodaClient"/>.
            </summary>
            <param name="client">A <see cref="T:SODA.SodaClient"/> used to access this ResourceMetadata on a Socrata Host.</param>
            <remarks>
            The constructor is internal because ResourceMetadata should be obtained through a SodaClient or Resource object.
            </remarks>
        </member>
        <member name="P:SODA.ResourceMetadata.Client">
            <summary>
            Gets the SodaClient object used for sending requests to this ResourceMetadata's Host.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.Host">
            <summary>
            Gets the url to the Socrata Open Data Portal that hosts this ResourceMetadata.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.Identifier">
            <summary>
            Gets the Socrata identifier (4x4) for the Resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.Name">
            <summary>
            Gets or sets the name of the Resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.Category">
            <summary>
            Gets or sets the category of the resource that this ResourceMetadata describes.
            </summary>
            <remarks>
            The available categories are defined by the Socrata Host.
            </remarks>
        </member>
        <member name="P:SODA.ResourceMetadata.Description">
            <summary>
            Gets or sets the description of the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.Tags">
            <summary>
            Gets or sets the tags (topics) assigned to the resource that this ResourceMetadata describes.
            </summary>
            <remarks>
            Tags (topics) are free-form text not necessarily pre-defined by the Socrata Host.
            </remarks>
        </member>
        <member name="P:SODA.ResourceMetadata.Attribution">
            <summary>
            Gets or sets the name of the entity providing the data that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.AttributionLink">
            <summary>
            Gets or sets the url for the entity providing the data that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.CreationDateUnix">
            <summary>
            Gets the unix timestamp when the resource that this ResourceMetadata describes was created.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.CreationDate">
            <summary>
            Gets the local DateTime representation of <see cref="P:SODA.ResourceMetadata.CreationDateUnix">CreationDateUnix</see>.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.PublishedDateUnix">
            <summary>
            Gets the unix timestamp when the resource that this ResourceMetadata describes was first published.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.PublishedDate">
            <summary>
            Gets the local DateTime representation of <see cref="P:SODA.ResourceMetadata.PublishedDateUnix">PublishedDateUnix</see>.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.RowsLastUpdatedUnix">
            <summary>
            Gets the unix timestamp when the data in the resource that this ResourceMetadata describes was last updated.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.RowsLastUpdated">
            <summary>
            Gets the local DateTime representation of <see cref="P:SODA.ResourceMetadata.RowsLastUpdatedUnix">RowsLastUpdatedUnix</see>.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.SchemaLastUpdatedUnix">
            <summary>
            Gets the unix timestamp when the schema of the resource that this ResourceMetadata describes was last modified.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.SchemaLastUpdated">
            <summary>
            Gets the local DateTime representation of <see cref="P:SODA.ResourceMetadata.SchemaLastUpdatedUnix">SchemaLastUpdatedUnix</see>
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.Columns">
            <summary>
            Gets the collection of <see cref="T:SODA.ResourceColumn">ResourceColumn</see> that describe the schema of this ResourceMetadata's resource.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.CommentsCount">
            <summary>
            Gets the number of comments posted to the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.DownloadsCount">
            <summary>
            Gets the number of times the resource that this ResourceMetadata describes has been downloaded.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.RatingsCount">
            <summary>
            Gets the total number of ratings received by the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.AverageRating">
            <summary>
            Gets the average rating for the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.ViewsCount">
            <summary>
            Gets the number of times the resource that this ResourceMetadata describes has been viewed.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.DisplayType">
            <summary>
            Gets the Socrata object type of the resource that this ResourceMetadata describes.
            </summary>
            <remarks>
            E.g. table, map, calendar, chart
            </remarks>
        </member>
        <member name="P:SODA.ResourceMetadata.ViewType">
            <summary>
            Gets the Socrata view type of the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.TableId">
            <summary>
            Gets the Socrata internal table id for the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.Metadata">
            <summary>
            Gets or sets a dynamic dictionary of additional metadata fields.
            </summary>
            <remarks>
            If the Socrata Host has defined any custom metadata fields, these will be available in this dictionary
            as a Dictionary&lt;string, dynamic&gt; under the "custom_fields" key.
            </remarks>
        </member>
        <member name="P:SODA.ResourceMetadata.RowIdentifierFieldId">
            <summary>
            Gets the internal Socrata id for the column that acts as the row identifier for the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.RowIdentifierField">
            <summary>
            Gets the SODA-compatible field name of the column that acts as the row identifier for the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.Query">
            <summary>
            Gets or sets a dynamic dictionary describing the filtering and sorting applied to the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.PrivateMetadata">
            <summary>
            Gets or sets a dynamic dictionary of "private" metadata associated with this ResourceMetadata.
            </summary>
            <remarks>
            <see cref="P:SODA.ResourceMetadata.ContactEmail">ContactEmail</see> is derived from the private metadata.
            </remarks>
        </member>
        <member name="P:SODA.ResourceMetadata.ContactEmail">
            <summary>
            Gets the contact email assigned to the resource that this ResourceMetadata describes.
            </summary>
        </member>
        <member name="P:SODA.ResourceMetadata.ViewFilters">
            <summary>
            Gets or sets a dynamic dictionary describing the filtering applied to the resource that this ResourceMetadata describes.
            </summary>
            <remarks>
            This appears to only be available when the resource is a Socrata Filtered View.
            In other words, Datasets, Maps, etc. do not have this metadata property.
            </remarks>
        </member>
        <member name="T:SODA.SodaDataFormat">
            <summary>
            Enumeration of the data-interchange formats supported by SODA.
            </summary>
        </member>
        <member name="F:SODA.SodaDataFormat.JSON">
            <summary>
            Value representing the javascript object notation data format.
            </summary>
        </member>
        <member name="F:SODA.SodaDataFormat.CSV">
            <summary>
            Value representing the comma separated values data format.
            </summary>
        </member>
        <member name="F:SODA.SodaDataFormat.XML">
            <summary>
            Value representing the extensible markup language data format.
            </summary>
        </member>
        <member name="T:SODA.SodaResult">
            <summary>
            A class representing the response from a SODA call.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.ByRowIdentifier">
            <summary>
            Gets the number of modifications made based on the row identifier.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.RowsUpdated">
            <summary>
            Gets the number of rows updated.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.RowsDeleted">
            <summary>
            Gets the number of rows deleted.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.RowsCreated">
            <summary>
            Gets the number of rows created.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.Errors">
            <summary>
            Gets the number of errors.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.BySID">
            <summary>
            Gets the number of modifications made based on the internal Socrata identifier.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.Message">
            <summary>
            Gets the explanatory text about this result.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.IsError">
            <summary>
            Gets a flag indicating if one or more errors occured.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.ErrorCode">
            <summary>
            Gets data about any errors that occured.
            </summary>
        </member>
        <member name="P:SODA.SodaResult.Data">
            <summary>
            Gets any additional data associated with this result.
            </summary>
        </member>
        <member name="T:SODA.SoqlQuery">
            <summary>
            A class representing a query against a Socrata resource using a series of SoQL clauses.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.Delimiter">
            <summary>
            The delimiter used for lists of parameters (e.g. a list of columns in Select)
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.SelectKey">
            <summary>
            The querystring key for the SoQL Select clause.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.WhereKey">
            <summary>
            The querystring key for the SoQL Where clause.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.OrderKey">
            <summary>
            The querystring key for the SoQL Order clause.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.GroupKey">
            <summary>
            The querystring key for the SoQL Group clause.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.HavingKey">
            <summary>
            The querystring key for the SoQL Having clause.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.LimitKey">
            <summary>
            The querystring key for the SoQL Limit clause.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.OffsetKey">
            <summary>
            The querystring key for the SoQL Offset clause.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.SearchKey">
            <summary>
            The querystring key for the SoQL full-text search clause.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.QueryKey">
            <summary>
            The querystring key for a raw SoQL query.
            </summary>
        </member>
        <member name="F:SODA.SoqlQuery.DefaultSelect">
            <summary>
            The default values for a Select clause.
            </summary>
            <remarks>
            The default is to select all columns (http://dev.socrata.com/docs/queries.html)
            </remarks>
        </member>
        <member name="F:SODA.SoqlQuery.DefaultOrderDirection">
            <summary>
            The default sort direction for an Order clause.
            </summary>
            <remarks>
            the default sort direction is ascending (http://dev.socrata.com/docs/queries.html#the_order_parameter)
            </remarks>
        </member>
        <member name="F:SODA.SoqlQuery.DefaultOrder">
            <summary>
            The default values for an Order clause.
            </summary>
            <remarks>
            There is no implicit order of results of a query,
            so at a minimum provide $order=:id to guarantee that the order of results will be stable for paging.
            (http://dev.socrata.com/docs/queries.html#the_order_parameter)
            </remarks>
        </member>
        <member name="F:SODA.SoqlQuery.MaximumLimit">
            <summary>
            The maximum number of results a query may return.
            </summary>
            <remarks>
            The maximum that can be requested with limit is 50,000 (http://dev.socrata.com/docs/paging.html)
            </remarks>
        </member>
        <member name="M:SODA.SoqlQuery.#ctor">
            <summary>
            Initialize a new SoqlQuery object.
            </summary>
        </member>
        <member name="M:SODA.SoqlQuery.#ctor(System.String)">
            <summary>
            Initialize a new SoqlQuery object with the given query string. Individual SoQL clauses cannot be overridden using the fluent syntax.
            </summary>
            <param name="query">One or more SoQL clauses and/or sub-queries.</param>
        </member>
        <member name="M:SODA.SoqlQuery.ToString">
            <summary>
            Converts this SoqlQuery into a string format suitable for use in a SODA call.
            </summary>
            <returns>The string representation of this SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.Select(System.String[])">
            <summary>
            Sets this SoqlQuery's select clause using the specified columns.
            </summary>
            <param name="columns">A list of column names to select during execution of this SoqlQuery.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.As(System.String[])">
            <summary>
            Uses the specified column aliases for this SoqlQuery's select clause.
            </summary>
            <param name="columnAliases">A list of column aliases to be applied, in the specified order. Aliases beyond the available select columns are ignored.</param>
            <returns>This SoqlQuery.</returns>
            <remarks>
            SODA calls ignore text casing in aliases and return all aliased column names in lowercase.
            </remarks>
        </member>
        <member name="M:SODA.SoqlQuery.Where(System.String)">
            <summary>
            Sets this SoqlQuery's where clause using the specified predicate.
            </summary>
            <param name="predicate">A filter to be applied to the columns selected by this SoqlQuery.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.Where(System.String,System.Object[])">
            <summary>
            Sets this SoqlQuery's where clause using the specified format string and substitution arguments.
            </summary>
            <param name="format">A composite format string, suitable for use with String.Format()</param>
            <param name="args">An array of objects to format.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.Order(System.String[])">
            <summary>
            Sets this SoqlQuery's order clause using the specified columns and the DefaultOrderDirection.
            </summary>
            <param name="columns">A list of column names that define the order in which the rows selected by this SoqlQuery are returned.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.Order(SODA.SoqlOrderDirection,System.String[])">
            <summary>
            Sets this SoqlQuery's order clause using the specified columns and the specified SoqlOrderDirection.
            </summary>
            <param name="direction">The direction to sort the rows selected by this SoqlQuery.</param>
            <param name="columns">A list of column names that define the order in which the rows selected by this SoqlQuery are returned.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.Group(System.String[])">
            <summary>
            Sets this SoqlQuery's group clause using the specified columns.
            </summary>
            <param name="columns">A list of column names that define how rows are grouped during execution of this SoqlQuery.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.Having(System.String)">
            <summary>
            Sets this SoqlQuery's having clause using the specified predicate.
            </summary>
            <param name="predicate">A filter to be applied to the results of an aggregation using <see cref="M:SODA.SoqlQuery.Group(System.String[])"/>.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.Having(System.String,System.Object[])">
            <summary>
            Sets this SoqlQuery's having clause using the specified format string and substitution arguments.
            </summary>
            <param name="format">A composite format string, suitable for use with String.Format()</param>
            <param name="args">An array of objects to format.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.Limit(System.Int32)">
            <summary>
            Sets this SoqlQuery's limit clause using the specified integral limit.
            </summary>
            <param name="limit">A number representing the maximum number of rows this SoqlQuery should return.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.Offset(System.Int32)">
            <summary>
            Sets this SoqlQuery's "offset" clause using the specified integral offset.
            </summary>
            <param name="offset">A number representing the starting offset into the total rows that this SoqlQuery returns.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.FullTextSearch(System.String)">
            <summary>
            Sets this SoqlQuery's full text search clause to the specified input.
            </summary>
            <param name="searchText">The input to a full text search.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.FullTextSearch(System.String,System.Object[])">
            <summary>
            Sets this SoqlQuery's full text search clause using the specified format string and substitution arguments.
            </summary>
            <param name="format">A composite format string, suitable for use with String.Format()</param>
            <param name="args">An array of objects to format.</param>
            <returns>This SoqlQuery.</returns>
        </member>
        <member name="M:SODA.SoqlQuery.getNonEmptyValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restricts the input to only the non-empty values
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.SelectColumns">
            <summary>
            Gets the columns that this SoqlQuery will select.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.SelectColumnAliases">
            <summary>
            Gets the aliases for the columns that this SoqlQuery will select.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.WhereClause">
            <summary>
            Gets the predicate that this SoqlQuery will use for results filtering.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.OrderDirection">
            <summary>
            Gets the sort direction that results from this SoqlQuery will be ordered on.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.OrderByColumns">
            <summary>
            Gets the columns that define the ordering for the results of this SoqlQuery.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.GroupByColumns">
            <summary>
            Gets the columns that define grouping for the results of this SoqlQuery.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.HavingClause">
            <summary>
            Gets the predicate that this SoqlQuery will use for aggregate filtering.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.LimitValue">
            <summary>
            Gets the maximum number of results that this SoqlQuery will return.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.OffsetValue">
            <summary>
            Gets the offset into the full resultset that this SoqlQuery will begin from.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.SearchText">
            <summary>
            Gets the input to a full-text search that this SoqlQuery will perform.
            </summary>
        </member>
        <member name="P:SODA.SoqlQuery.RawQuery">
            <summary>
            Gets the raw SoQL query, combining one or more SoQL clauses and/or sub-queries, that this SoqlQuery will execute.
            </summary>
        </member>
        <member name="T:SODA.SodaClient">
            <summary>
            A class for interacting with Socrata Data Portals using the Socrata Open Data API.
            </summary>
        </member>
        <member name="F:SODA.SodaClient.Host">
            <summary>
            The url to the Socrata Open Data Portal this client targets.
            </summary>
        </member>
        <member name="F:SODA.SodaClient.AppToken">
            <summary>
            The Socrata application token that this client uses for all requests.
            </summary>
            <remarks>
            Socrata Application Tokens are not required, but are recommended for expanded API quotas.
            See https://dev.socrata.com/docs/app-tokens.html for more information.
            </remarks>
        </member>
        <member name="F:SODA.SodaClient.Username">
            <summary>
            The user account that this client uses for Authentication during each request.
            </summary>
            <remarks>
            Authentication is only necessary when accessing datasets that have been marked as private or when making write requests (PUT, POST, and DELETE).
            See http://dev.socrata.com/docs/authentication.html for more information.
            </remarks>
        </member>
        <member name="M:SODA.SodaClient.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initialize a new SodaClient for the specified Socrata host, using the specified application token and Authentication credentials.
            </summary>
            <param name="host">The Socrata Open Data Portal that this client will target.</param>
            <param name="appToken">The Socrata application token that this client will use for all requests.</param>
            <param name="username">The user account that this client will use for Authentication during each request.</param>
            <param name="password">The password for the specified <paramref name="username"/> that this client will use for Authentication during each request.</param>
            <exception cref="T:System.ArgumentException">Thrown if no <paramref name="host"/> is provided.</exception>
        </member>
        <member name="M:SODA.SodaClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new SodaClient for the specified Socrata host, using the specified Authentication credentials.
            </summary>
            <param name="host">The Socrata Open Data Portal that this client will target.</param>
            <param name="username">The user account that this client will use for Authentication during each request.</param>
            <param name="password">The password for the specified <paramref name="username"/> that this client will use for Authentication during each request.</param>
            <exception cref="T:System.ArgumentException">Thrown if no <paramref name="host"/> is provided.</exception>
        </member>
        <member name="M:SODA.SodaClient.#ctor(System.String,System.String)">
            <summary>
            Initialize a new (anonymous) SodaClient for the specified Socrata host, using the specified application token.
            </summary>
            <param name="host">The Socrata Open Data Portal that this client will target.</param>
            <param name="appToken">The Socrata application token that this client will use for all requests.</param>
            <exception cref="T:System.ArgumentException">Thrown if no <paramref name="host"/> is provided.</exception>
        </member>
        <member name="M:SODA.SodaClient.GetMetadata(System.String)">
            <summary>
            Get a ResourceMetadata object using the specified resource identifier.
            </summary>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>
            A ResourceMetadata object for the specified resource identifier.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
        </member>
        <member name="M:SODA.SodaClient.GetMetadataPage(System.Int32)">
            <summary>
            Get a collection of ResourceMetadata objects on the specified page.
            </summary>
            <param name="page">The 1-indexed page of the Metadata Catalog on this client's Socrata host.</param>
            <returns>A collection of ResourceMetadata objects from the specified page of this client's Socrata host.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="page"/> is zero or negative.</exception>
        </member>
        <member name="M:SODA.SodaClient.GetResource``1(System.String)">
            <summary>
            Get a Resource object using the specified resource identifier.
            </summary>
            <typeparam name="TRow">The .NET class that represents the type of the underlying row in the Resource.</typeparam>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A Resource object with an underlying row set of type <typeparamref name="TRow"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
        </member>
        <member name="M:SODA.SodaClient.Query``1(SODA.SoqlQuery,System.String)">
            <summary>
            Query using the specified <see cref="T:SODA.SoqlQuery"/> against the specified resource identifier.
            </summary>
            <typeparam name="TRow">The .NET class that represents the type of the underlying rows in the result set of this query.</typeparam>
            <param name="soqlQuery">A <see cref="T:SODA.SoqlQuery"/> to execute against the Resource.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A collection of entities of type <typeparamref name="TRow"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
            <remarks>
            By default, Socrata will only return the first 1000 rows unless otherwise specified in SoQL using the Limit and Offset parameters.
            This method checks the specified SoqlQuery object for either the Limit or Offset parameter, and honors those parameters if present.
            If both Limit and Offset are not part of the SoqlQuery, this method attempts to retrieve all rows in the dataset across all pages.
            In other words, this method hides the fact that Socrata will only return 1000 rows at a time, unless explicity told not to via the SoqlQuery argument.
            </remarks>
        </member>
        <member name="M:SODA.SodaClient.Upsert(System.String,SODA.SodaDataFormat,System.String)">
            <summary>
            Update/Insert the specified payload string using the specified resource identifier.
            </summary>
            <param name="payload">A string of serialized data.</param>
            <param name="dataFormat">One of the data-interchange formats that Socrata supports, into which the payload has been serialized.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A <see cref="T:SODA.SodaResult"/> indicating success or failure.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="dataFormat"/> is equal to <see cref="F:SODA.SodaDataFormat.XML"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this SodaClient was initialized without authentication credentials.</exception>
        </member>
        <member name="M:SODA.SodaClient.Upsert``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Update/Insert the specified collection of entities using the specified resource identifier.
            </summary>
            <param name="payload">A collection of entities, where each represents a single row in the target resource.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A <see cref="T:SODA.SodaResult"/> indicating success or failure.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this SodaClient was initialized without authentication credentials.</exception>
        </member>
        <member name="M:SODA.SodaClient.BatchUpsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``0,System.Boolean},System.String)">
            <summary>
            Update/Insert the specified collection of entities in batches of the specified size, using the specified resource identifier.
            </summary>
            <param name="payload">A collection of entities, where each represents a single row in the target resource.</param>
            <param name="batchSize">The maximum number of entities to process in a single batch.</param>
            <param name="breakFunction">A function which, when evaluated true, causes a batch to be sent (possibly before it reaches <paramref name="batchSize"/>).</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A collection of <see cref="T:SODA.SodaResult"/>, one for each batched Upsert.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this SodaClient was initialized without authentication credentials.</exception>
        </member>
        <member name="M:SODA.SodaClient.BatchUpsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String)">
            <summary>
            Update/Insert the specified collection of entities in batches of the specified size, using the specified resource identifier.
            </summary>
            <param name="payload">A collection of entities, where each represents a single row in the target resource.</param>
            <param name="batchSize">The maximum number of entities to process in a single batch.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A collection of <see cref="T:SODA.SodaResult"/>, one for each batch processed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this SodaClient was initialized without authentication credentials.</exception>
        </member>
        <member name="M:SODA.SodaClient.Replace(System.String,SODA.SodaDataFormat,System.String)">
            <summary>
            Replace any existing rows with the payload data, using the specified resource identifier.
            </summary>
            <param name="payload">A string of serialized data.</param>
            <param name="dataFormat">One of the data-interchange formats that Socrata supports, into which the payload has been serialized.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A <see cref="T:SODA.SodaResult"/> indicating success or failure.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="dataFormat"/> is equal to <see cref="F:SODA.SodaDataFormat.XML"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this SodaClient was initialized without authentication credentials.</exception>
        </member>
        <member name="M:SODA.SodaClient.Replace``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Replace any existing rows with a collection of entities, using the specified resource identifier.
            </summary>
            <param name="payload">A collection of entities, where each represents a single row in the target resource.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A <see cref="T:SODA.SodaResult"/> indicating success or failure.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this SodaClient was initialized without authentication credentials.</exception>
        </member>
        <member name="M:SODA.SodaClient.DeleteRow(System.String,System.String)">
            <summary>
            Delete a single row using the specified row identifier and the specified resource identifier.
            </summary>
            <param name="rowId">The identifier of the row to be deleted.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A <see cref="T:SODA.SodaResult"/> indicating success or failure.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="rowId"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified <paramref name="resourceId"/> does not match the Socrata 4x4 pattern.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this SodaClient was initialized without authentication credentials.</exception>
        </member>
        <member name="M:SODA.SodaClient.read``1(System.Uri,SODA.SodaDataFormat)">
            <summary>
            Send an HTTP GET request to the specified URI and intepret the result as TResult.
            </summary>
            <typeparam name="TResult">The .NET class to use for response deserialization.</typeparam>
            <param name="uri">A uniform resource identifier that is the target of this GET request.</param>
            <param name="dataFormat">One of the data-interchange formats that Socrata supports. The default is JSON.</param>
            <returns>The HTTP response, deserialized into an object of type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:SODA.SodaClient.write``2(System.Uri,System.String,``0)">
            <summary>
            Send an HTTP request of the specified method and interpret the result.
            </summary>
            <typeparam name="TPayload">The .NET class that represents the request payload.</typeparam>
            <typeparam name="TResult">The .NET class to use for response deserialization.</typeparam>
            <param name="uri">A uniform resource identifier that is the target of this GET request.</param>
            <param name="method">One of POST, PUT, or DELETE</param>
            <param name="payload">An object graph to serialize and send with the request.</param>
            <returns>The HTTP response, deserialized into an object of type <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="P:SODA.SodaClient.RequestTimeout">
            <summary>
            If set, the number of milliseconds to wait before requests to the <see cref="F:SODA.SodaClient.Host"/> timeout and throw a <see cref="T:System.Net.WebException"/>.
            If unset, the default value is that of <see cref="P:System.Net.HttpWebRequest.Timeout"/>.
            </summary>
        </member>
        <member name="T:SODA.Utilities.JsonSerializationExtensions">
            <summary>
            Convenience methods for JSON serialization.
            </summary>
        </member>
        <member name="M:SODA.Utilities.JsonSerializationExtensions.ToJsonString(System.Object)">
            <summary>
            Converts the target object into its JSON string representation.
            </summary>
            <returns>The serialized JSON string of the target object.</returns>
        </member>
        <member name="T:SODA.Utilities.SodaUri">
            <summary>
            Factory class for creating Socrata-specific Uris.
            </summary>
        </member>
        <member name="F:SODA.Utilities.SodaUri.httpPrefix">
            <summary>
            A regex used to strip out the http prefix in incoming socrataHost parameters.
            </summary>
        </member>
        <member name="F:SODA.Utilities.SodaUri.httpsPrefix">
            <summary>
            A regex used to check incoming socrataHost parameters for having the https prefix.
            </summary>
        </member>
        <member name="M:SODA.Utilities.SodaUri.enforceHttps(System.String)">
            <summary>
            Ensure that the specified Socrata host url uses the https protocol.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <returns>A SODA-compatible Url</returns>
        </member>
        <member name="M:SODA.Utilities.SodaUri.metadataUrl(System.String,System.String)">
            <summary>
            Create a url string suitable for interacting with resource metadata on the specified Socrata host.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A SODA-compatible Url for the target Socrata host.</returns>
        </member>
        <member name="M:SODA.Utilities.SodaUri.ForMetadata(System.String,System.String)">
            <summary>
            Create a Uri for sending a request to the specified resource metadata on the specified Socrata host.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A Uri pointing to resource metadata for the specified Socrata host and resource identifier.</returns>
        </member>
        <member name="M:SODA.Utilities.SodaUri.ForMetadataList(System.String,System.Int32)">
            <summary>
            Create a Uri for sending a request to a catalog of resource metadata on the specified Socrata host and page of the catalog.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <param name="page">The page of the resource metadata catalog on the Socrata host to target.</param>
            <returns>A Uri pointing to the specified page of the resource metadata catalog for the specified Socrata host.</returns>
        </member>
        <member name="M:SODA.Utilities.SodaUri.ForResourceAPI(System.String,System.String,System.String)">
            <summary>
            Create a Uri for sending a request to the specified resource on the specified Socrata host.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <param name="rowId">The identifier for a row in the resource to target.</param>
            <returns>A Uri pointing to the SODA endpoint for the specified resource in the specified Socrata host.</returns>
        </member>
        <member name="M:SODA.Utilities.SodaUri.ForResourcePage(System.String,System.String)">
            <summary>
            Create a Uri to the landing page of the specified resource on the specified Socrata host.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A Uri pointing to the landing page of the specified resource on the specified Socrata host.</returns>
        </member>
        <member name="M:SODA.Utilities.SodaUri.ForResourceAboutPage(System.String,System.String)">
            <summary>
            Create a Uri to the landing page of the specified resource on the specified Socrata host.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A Uri pointing to the landing page of the specified resource on the specified Socrata host.</returns>
        </member>
        <member name="M:SODA.Utilities.SodaUri.ForResourceAPIPage(System.String,System.String)">
            <summary>
            Create a Uri to the Foundry-style API documentation page of the specified resource on the specified Socrata host.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <returns>A Uri pointing to the Foundry API documentation page of the specified resource on the specified Socrata host.</returns>
        </member>
        <member name="M:SODA.Utilities.SodaUri.ForQuery(System.String,System.String,SODA.SoqlQuery)">
            <summary>
            Create a Uri for querying the specified resource on the specified Socrata host, using the specified SoqlQuery object.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <param name="resourceId">The identifier (4x4) for a resource on the Socrata host to target.</param>
            <param name="soqlQuery">A SoqlQuery object to use for querying.</param>
            <returns>A query Uri for the specified resource on the specified Socrata host.</returns>
        </member>
        <member name="M:SODA.Utilities.SodaUri.ForCategoryPage(System.String,System.String)">
            <summary>
            Create a Uri to the landing page of a specified category on the specified Socrata host.
            </summary>
            <param name="socrataHost">The Socrata host to target.</param>
            <param name="category">The name of a category on the target Socrata host.</param>
            <returns>A Uri pointing to the landing page of the specified category on the specified Socrata host.</returns>
        </member>
        <member name="T:SODA.Utilities.DateTimeConverter">
            <summary>
            Helper class for converting Unix timestamps to local DateTime
            </summary>
        </member>
        <member name="F:SODA.Utilities.DateTimeConverter.UnixEpoch">
            <summary>
            The beginning of time for the Unix calendar.
            </summary>
        </member>
        <member name="M:SODA.Utilities.DateTimeConverter.FromUnixTimestamp(System.Double)">
            <summary>
            Convert a Unix timestamp into its local DateTime representation.
            </summary>
            <param name="unixTimestamp">A Unix timestamp (seconds since the Unix Epoch) represented as a double precision floating-point number.</param>
            <returns>The local DateTime representation of the specified Unix timestamp.</returns>
        </member>
        <member name="T:SODA.Utilities.FourByFour">
            <summary>
            Helper class for validating Socrata "4x4" resource identifiers.
            </summary>
        </member>
        <member name="M:SODA.Utilities.FourByFour.IsValid(System.String)">
            <summary>
            Test whether the specified input string is a valid Socrata "4x4" resource identifier.
            </summary>
            <param name="testFourByFour">An input string to test.</param>
            <returns>True if the specified input is a valid Socrata "4x4" resource identifier. False otherwise.</returns>
        </member>
        <member name="M:SODA.Utilities.FourByFour.IsNotValid(System.String)">
            <summary>
            Test whether the specified input string is an invalid Socrata "4x4" resource identifier.
            </summary>
            <param name="testFourByFour">An input string to test.</param>
            <returns>True if the specified input is an invalid Socrata "4x4" resource identifier. False otherwise.</returns>
            <remarks>
            This is the logical negation of <see cref="M:SODA.Utilities.FourByFour.IsValid(System.String)">IsValid</see>
            </remarks>
        </member>
        <member name="M:SODA.Utilities.WebExceptionExtensions.UnwrapExceptionMessage(System.Net.WebException)">
            <summary>
            Helper method for getting the response string from an instance of a WebException.
            </summary>
            <param name="webException">The WebException whose response string will be read.</param>
            <returns>The response string if it exists, otherwise the Message property of the WebException.</returns>
        </member>
    </members>
</doc>
