<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SODA.Utilities</name>
    </assembly>
    <members>
        <member name="T:SODA.Utilities.DataFileExporter">
            <summary>
            A helper class for exporting a collection of objects to various text-based file formats.
            </summary>
        </member>
        <member name="F:SODA.Utilities.DataFileExporter.DefaultCSVPath">
            <summary>
            The default filepath used for exporting CSV data.
            </summary>
        </member>
        <member name="F:SODA.Utilities.DataFileExporter.DefaultTSVPath">
            <summary>
            The default filepath used for exporting TSV data.
            </summary>
        </member>
        <member name="F:SODA.Utilities.DataFileExporter.DefaultJSONPath">
            <summary>
            The default filepath used for exporting JSON data.
            </summary>
        </member>
        <member name="M:SODA.Utilities.DataFileExporter.ExportCSV``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Export a collection of objects to DataFileExporter.DefaultCSVPath (in the working directory).
            </summary>
            <param name="entities">A collection of objects to export as Comma Separated Values.</param>
            <remarks>
            String values containing double-quotes will have the double-quotes escaped.
            
            Complex types will be serialized to JSON. In other words, if you export a collection as CSV/TSV,
            and items in that collection contain a property with a complex type (i.e. not a System primitive)
            that property will be serialized to its JSON string representation.
            
            DataFileExporter makes every attempt to honor DataContracts.
            </remarks>
        </member>
        <member name="M:SODA.Utilities.DataFileExporter.ExportCSV``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Export a collection of objects to the specified file in Comma Separated Values format, overwriting any existing data.
            </summary>
            <param name="entities">A collection of objects to export as Comma Separated Values.</param>
            <param name="dataFilePath">The path to a .csv file in a writeable directory.</param>
            <remarks>
            String values containing double-quotes will have the double-quotes escaped.
            
            Complex types will be serialized to JSON. In other words, if you export a collection as CSV/TSV,
            and items in that collection contain a property with a complex type (i.e. not a System primitive)
            that property will be serialized to its JSON string representation.
            
            DataFileExporter makes every attempt to honor DataContracts.
            </remarks>
        </member>
        <member name="M:SODA.Utilities.DataFileExporter.ExportTSV``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Export a collection of objects to DataFileExporter.DefaultTSVPath (in the working directory).
            </summary>
            <param name="entities">A collection of objects to export as Tab Separated Values.</param>
            <remarks>
            String values containing double-quotes will have the double-quotes escaped.
            
            Complex types will be serialized to JSON. In other words, if you export a collection as CSV/TSV,
            and items in that collection contain a property with a complex type (i.e. not a System primitive)
            that property will be serialized to its JSON string representation.
            
            DataFileExporter makes every attempt to honor DataContracts.
            </remarks>
        </member>
        <member name="M:SODA.Utilities.DataFileExporter.ExportTSV``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Export a collection of objects to the specified file in Tab Separated Values format, overwriting any existing data.
            </summary>
            <param name="entities">A collection of objects to export as Tab Separated Values.</param>
            <param name="dataFilePath">The path to a .tsv file in a writeable directory.</param>
            <remarks>
            String values containing double-quotes will have the double-quotes escaped.
            
            Complex types will be serialized to JSON. In other words, if you export a collection as CSV/TSV,
            and items in that collection contain a property with a complex type (i.e. not a System primitive)
            that property will be serialized to its JSON string representation.
            
            DataFileExporter makes every attempt to honor DataContracts.
            </remarks>
        </member>
        <member name="M:SODA.Utilities.DataFileExporter.ExportJSON``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Export a collection of objects to DataFileExporter.DefaultJSONPath (in the working directory).
            </summary>
            <param name="entities">A collection of objects to export as JSON.</param>
        </member>
        <member name="M:SODA.Utilities.DataFileExporter.ExportJSON``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Export a collection of objects to the specified file, overwriting any existing data.
            </summary>
            <param name="dataFilePath">The path to a .json file in a writeable directory.</param>
            <param name="entities">A collection of objects to export as JSON.</param>
        </member>
        <member name="T:SODA.Utilities.Ews2010Sp2Client">
            <summary>
            EwsClient implementation for Exchange Server 2010 SP2
            </summary>
        </member>
        <member name="T:SODA.Utilities.EwsClient">
            <summary>
            Base implementation of the IEwsClient interface
            </summary>
        </member>
        <member name="T:SODA.Utilities.IEwsClient">
            <summary>
            Interface definition for an Exchange Web Services Client
            </summary>
        </member>
        <member name="M:SODA.Utilities.IEwsClient.DownloadAttachment(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Search the Inbox for the first unread email with an attachment matching the specified regular expression, and if found, download the attachment to the specified directory.
            </summary>
            <param name="attachmentNamePattern">The attachment filename pattern to search for.</param>
            <param name="targetDirectory">The (writable) directory where a found attachment will be saved.</param>
            <returns>True if a matching attachment was found and downloaded. False otherwise.</returns>
        </member>
        <member name="M:SODA.Utilities.IEwsClient.SendMessage(System.String,System.String,System.String[])">
            <summary>
            Send an email message with the specified subject and body to the specified list of recipient email addresses.
            </summary>
            <param name="messageSubject">The subject line of the email message.</param>
            <param name="messageBody">The plain-text content of the email message.</param>
            <param name="recipients">One or more email addresses that will be recipients of the email message.</param>
        </member>
        <member name="P:SODA.Utilities.IEwsClient.ServiceEndpoint">
            <summary>
            The Uri at which the target Exchange Web Services are hosted.
            </summary>
        </member>
        <member name="F:SODA.Utilities.EwsClient.exchangeService">
            <summary>
            The underlying <see cref="T:Microsoft.Exchange.WebServices.Data.ExchangeService"/> that this client uses to talk to EWS.
            </summary>
        </member>
        <member name="M:SODA.Utilities.EwsClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new EwsClient using the specified username and password to connect to the latest version of EWS. An attempt is made to autodiscover the EWS endpoint.
            </summary>
            <param name="username">A user with login rights on the specified <paramref name="domain"/>.</param>
            <param name="password">The password for the specified <paramref name="username"/>.</param>
            <param name="domain">The Exchange domain.</param>
            <remarks>
            In order for autodiscovery of an EWS endpoint to work, there may be additional Exchange configuration required.
            See http://msdn.microsoft.com/en-us/library/office/jj900169(v=exchg.150).aspx.
            </remarks>
        </member>
        <member name="M:SODA.Utilities.EwsClient.#ctor(System.String,System.String,System.String,System.Uri)">
            <summary>
            Initialize a new EwsClient using the specified username and password to connect to the latest version of EWS at the specified service endpoint.
            </summary>
            <param name="username">A user with login rights on the specified <paramref name="domain"/>.</param>
            <param name="password">The password for the specified <paramref name="username"/>.</param>
            <param name="domain">The Exchange domain.</param>
            <param name="serviceUrl">The address Exchange uses to communicate with Exchange Web Services.</param>
        </member>
        <member name="M:SODA.Utilities.EwsClient.#ctor(System.String,System.String,System.String,Microsoft.Exchange.WebServices.Data.ExchangeVersion)">
            <summary>
            Initialize a new EwsClient using the specified username and password to connect to the specified version of EWS. An attempt is made to autodiscover the EWS endpoint.
            </summary>
            <param name="username">A user with login rights on the specified <paramref name="domain"/>.</param>
            <param name="password">The password for the specified <paramref name="username"/>.</param>
            <param name="domain">The Exchange domain.</param>
            <param name="exchangeVersion">The version of Exchange.</param>
            <remarks>
            In order for autodiscovery of an EWS endpoint to work, there may be additional Exchange configuration required.
            See http://msdn.microsoft.com/en-us/library/office/jj900169(v=exchg.150).aspx.
            </remarks>
        </member>
        <member name="M:SODA.Utilities.EwsClient.#ctor(System.String,System.String,System.String,System.Uri,Microsoft.Exchange.WebServices.Data.ExchangeVersion)">
            <summary>
            Initialize a new EwsClient using the specified username and password to connect to the specified version of EWS at the specified service endpoint.
            </summary>
            <param name="username">A user with login rights on the specified <paramref name="domain"/>.</param>
            <param name="password">The password for the specified <paramref name="username"/>.</param>
            <param name="domain">The Exchange domain.</param>
            <param name="serviceUrl">The address Exchange uses to communicate with Exchange Web Services.</param>
            <param name="exchangeVersion">The version of Exchange.</param>
        </member>
        <member name="M:SODA.Utilities.EwsClient.DownloadAttachment(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Search the Inbox for the first unread email with an attachment matching the specified regular expression, and if found, download the attachment to the specified directory.
            </summary>
            <param name="attachmentNamePattern">The attachment filename pattern to search for.</param>
            <param name="targetDirectory">The (writable) directory where a found attachment will be saved.</param>
            <returns>True if a matching attachment was found and downloaded. False otherwise.</returns>
            <remarks>
            If the <paramref name="targetDirectory"/> does not exist, it will be created before searching for an attachment to download.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="attachmentNamePattern"/> regular expression is null.</exception>
        </member>
        <member name="M:SODA.Utilities.EwsClient.SendMessage(System.String,System.String,System.String[])">
            <summary>
            Send an email message with the specified subject and body to the specified list of recipient email addresses.
            </summary>
            <param name="messageSubject">The subject line of the email message.</param>
            <param name="messageBody">The plain-text content of the email message.</param>
            <param name="recipients">One or more email addresses that will be recipients of the email message.</param>
            <exception cref="T:System.ArgumentException">Thrown if the specified list of recipients is null or empty.</exception>
        </member>
        <member name="P:SODA.Utilities.EwsClient.Inbox">
            <summary>
            Gets a <see cref="T:Microsoft.Exchange.WebServices.Data.Folder"/> object representing the Inbox that this client connects to.
            </summary>
        </member>
        <member name="P:SODA.Utilities.EwsClient.ServiceEndpoint">
            <summary>
            The Uri at which the target Exchange Web Services are hosted.
            </summary>
        </member>
        <member name="M:SODA.Utilities.Ews2010Sp2Client.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new EwsClient targeting Exchange Web Services 2010 SP2.
            </summary>
            <param name="username">A user with login rights on the specified <paramref name="domain"/>.</param>
            <param name="password">The password for the specified <paramref name="username"/>.</param>
            <param name="domain">The Exchange domain.</param>
        </member>
        <member name="T:SODA.Utilities.Ews2007Sp1Client">
            <summary>
            EwsClient implementation for Exchange Server 2007 SP1
            </summary>
        </member>
        <member name="M:SODA.Utilities.Ews2007Sp1Client.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new EwsClient targeting Exchange Web Services 2007 SP1.
            </summary>
            <param name="username">A user with login rights on the specified <paramref name="domain"/>.</param>
            <param name="password">The password for the specified <paramref name="username"/>.</param>
            <param name="domain">The Exchange domain.</param>
        </member>
        <member name="T:SODA.Utilities.ExcelDataReaderHelper">
            <summary>
            A helper class for working with Excel using ExcelDataReader
            </summary>
        </member>
        <member name="M:SODA.Utilities.ExcelDataReaderHelper.GetRowsFromDataSheets(System.String,System.Boolean)">
            <summary>
            Opens an Excel file and collects all data rows in every sheet
            </summary>
            <param name="excelFileName">The path to a readable Excel (.xls or .xlsx) file.</param>
            <param name="isFirstRowColumnNames">Whether or not the first row of a worksheet is the name of the column; if it is, it won't be added to the IEnumerable</param>
            <returns>The combined collection of rows from each sheet of data in the underlying Excel file.</returns>
        </member>
        <member name="T:SODA.Utilities.DataRowExtensions">
            <summary>
            Extension methods for working with a <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="M:SODA.Utilities.DataRowExtensions.SelectFirstOneOf(System.Data.DataRow,System.String[])">
            <summary>
            Searches the data row for the first field among the provided field names.
            </summary>
            <param name="row">A data row.</param>
            <param name="fieldsToLookFor">A collection of field names to search for.</param>
            <returns>The value of the first matched field, or null.</returns>
        </member>
        <member name="T:SODA.Utilities.ObjectExtensions">
            <summary>
            Extension methods for all objects.
            </summary>
        </member>
        <member name="M:SODA.Utilities.ObjectExtensions.SafeToString(System.Object)">
            <summary>
            ToString that handles cases where the target is null.
            </summary>
        </member>
        <member name="T:SODA.Utilities.StringExtensions">
            <summary>
            Extension methods for string objects.
            </summary>
        </member>
        <member name="M:SODA.Utilities.StringExtensions.FilterForPrintableAscii(System.String)">
            <summary>
            Returns the input sting with all non-printable, non-ascii characters removed.
            </summary>
        </member>
        <member name="M:SODA.Utilities.StringExtensions.NormalizeQuotes(System.String)">
            <summary>
            Replaces unicode quotation marks with ASCII quotation marks.
            </summary>
        </member>
        <member name="M:SODA.Utilities.StringExtensions.EscapeDoubleQuotes(System.String)">
            <summary>
            Escapes all unescaped double quotes in the input.
            </summary>
        </member>
        <member name="T:SODA.Utilities.Office365EwsClient">
            <summary>
            EwsClient implementation for Office 365
            </summary>
        </member>
        <member name="M:SODA.Utilities.Office365EwsClient.#ctor(System.String,System.String)">
            <summary>
            Initialize a new Office365EwsClient using the specified email address and password to connect to the latest version of Office 365 EWS.
            </summary>
            <param name="emailAddress">An email address with login rights on Office 365.</param>
            <param name="password">The password for the specified <paramref name="emailAddress"/>.</param>
        </member>
        <member name="T:SODA.Utilities.SeparatedValuesDelimiter">
            <summary>
            An enumeration of the possible delimiter characters for serializing data as "separated values"
            </summary>
        </member>
        <member name="F:SODA.Utilities.SeparatedValuesDelimiter.Comma">
            <summary>
            Represents using the comma character "," as a delimiter
            </summary>
        </member>
        <member name="F:SODA.Utilities.SeparatedValuesDelimiter.Tab">
            <summary>
            Represents using the tab character "\t" as a delimiter
            </summary>
        </member>
        <member name="T:SODA.Utilities.SeparatedValuesSerializer">
            <summary>
            A helper class for serializing data to a "separated values" representation.
            </summary>
        </member>
        <member name="M:SODA.Utilities.SeparatedValuesSerializer.DelimiterString(SODA.Utilities.SeparatedValuesDelimiter)">
            <summary>
            Gets the corresponding delimiter string for the specified <see cref="T:SODA.Utilities.SeparatedValuesDelimiter"/>
            </summary>
        </member>
        <member name="M:SODA.Utilities.SeparatedValuesSerializer.SerializeToString``1(System.Collections.Generic.IEnumerable{``0},SODA.Utilities.SeparatedValuesDelimiter,System.Boolean)">
            <summary>
            Serialize the specified entity collection to a string using the specified delimiter character, optionally generating a header row
            </summary>
            <typeparam name="T">The type of entities in the collection.</typeparam>
            <param name="entities">The collection to serialize.</param>
            <param name="delimiter">A <see cref="T:SODA.Utilities.SeparatedValuesDelimiter"/> indicating how to separate individual fields in the output string.</param>
            <param name="generateHeader">True to generate a header row for the serialized fields, false to skip the header row. The default is true.</param>
            <returns>A string reperesentation of the entity collection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when an invalid <paramref name="delimiter"/> is provided.</exception>
        </member>
        <member name="T:SODA.Utilities.SimpleFileLogger">
            <summary>
            A helper class for logging messages to files and the Console.
            </summary>
        </member>
        <member name="F:SODA.Utilities.SimpleFileLogger.DefaultLogFile">
            <summary>
            The default filepath used for logging.
            </summary>
        </member>
        <member name="F:SODA.Utilities.SimpleFileLogger.DefaultMaximumLogBytes">
            <summary>
            The default maximum size a log file can grow to before it is rolled over. The default is 1MB.
            </summary>
        </member>
        <member name="F:SODA.Utilities.SimpleFileLogger.logger">
            <summary>
            Handle to the underlying log file.
            </summary>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.#ctor">
            <summary>
            Initialize a new SimpleFileLogger using the default log file and maximum log size.
            </summary>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.#ctor(System.String)">
            <summary>
            Initialize a new SimpleFileLogger object using the specified log file path and the default maximum log size.
            </summary>
            <param name="logFilePath">The path to a readable and writeable text file.</param>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.#ctor(System.Int32)">
            <summary>
            Initialize a new SimpleFileLogger object using the specified maximum log size (in bytes) and the default log file.
            </summary>
            <param name="maxLogBytes">A positive number of bytes that the log file size should not exceed.</param>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new SimpleFileLogger object using the specified file and maximum log size (in bytes).
            </summary>
            <param name="logFilePath">The path to a readable and writeable text file.</param>
            <param name="maxLogBytes">A positive number of bytes that the log file size should not exceed.</param>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.Dispose">
            <summary>
            Implementing IDisposable to clean up the log file handler.
            </summary>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.WriteLine">
            <summary>
            Log a blank line.
            </summary>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.WriteLine(System.String)">
            <summary>
            Log the specified message on its own line.
            </summary>
            <param name="message">The text of the message to log.</param>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Log a message, using the specified format and arguments, on its own line.
            </summary>
            <param name="format">The message template.</param>
            <param name="args">The data to insert into the message template.</param>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.Write(System.String,System.Exception)">
            <summary>
            Log the specified message and data from the specified exception.
            </summary>
            <param name="message">The text of the message to log.</param>
            <param name="exception">An exception whose data will be logged.</param>
        </member>
        <member name="M:SODA.Utilities.SimpleFileLogger.Write(System.Exception)">
            <summary>
            Log data from the specified exception.
            </summary>
            <param name="exception">An exception whose data will be logged.</param>
        </member>
        <member name="P:SODA.Utilities.SimpleFileLogger.LogFilePath">
            <summary>
            The complete filepath to this SimpleFileLogger's log file.
            </summary>
        </member>
    </members>
</doc>
